#!/bin/bash
cd "$(dirname "$0")"

warning="$(tput setaf 1)"

gitm() {

    # Get all updates from the cloud
    printf "$warning Fetching up all updates... \n"
    git pull
    printf "\n"

    # Add up all files to a commit
    printf "$warning Adding all files to commit... \n"
    git add .
    printf "\n"

    # Assigning a commit message
    printf "$warning Type a commit message here: "
    read input
    printf "\n"
    
    # Commiting...
    printf "$warning Ok, now let's apply this to a commit... \n"
    git commit -m "$input"
    printf "\n"

    # Pushing all updates to the cloud
    printf "$warning Uploading all changes to the cloud \n"
    git push -u origin master
    printf "\n"

    # Program is finally happy
    printf "$warning Job is done!"
    exit 0
}

cleanm() {
    mv .git/config config
    rm -rf .git
    sh ./setup-git*
    mv config .git/config
    git add --all .
    git commit -m "Monthly cleaning"
    git push origin master --force
    exit 0
}

setupm() {
    # Adding some option here
    set -e

    # Initializing a git repository
    printf "$warning Let's initialize a git repository here... \n"
    git init
    printf "\n"

    # Let's save some credentials here...
    
    ## Username here
    printf "\n $warning Enter your full name for the git credentials: "
    read username
    printf "\n $warning Saving your name address to its database ... \n"
    git config --global user.name "$username"
    printf "$warning Saving the username to its database ... \n"

    ## Full Name here
    printf "\n $warning Enter your email address here to the git credentials: "
    read email
    printf "\n $warning Saving your email address to its database ... \n"
    git config --global user.email "$email"

    ## Setting vim as the main git editor
    printf "\n $warning Taking the 'vim' editor as the main one ... \n"
    sudo git config --system core.editor vim

    # Setting up caching and push configs
    printf "\n $warning Let me set up some additional useful configurations ... \n"
    git config --global credential.helper cache
    git config --global credential.helper 'cache --timeout=25000'
    git config --global push.default simple
    
    # Job is done
    printf "\n $warning Program has successfully finished its job! \n"
    exit 0
}

helpm() {
    USAGE="
usage: ./mirror [ git | clean | setup ]
        
        git         Automates all tasks of git
                    source version control system

        clean       This script should be run in
                    monthly intercel. This script cleans
                    caches of unnesecarry git garbages

        setup       Startup script that fill configure
                    an environment for brand new arch
                    linux installations
    "
    printf "$(tput setaf 3)$USAGE"
    exit 0
}

if [ $# -eq 0 ]
then
    helpm
fi
while [ $# -gt 0 ]
do
    key="$1"
    
    case $key in
        git)
            gitm
            break
            ;;
        clean)
            cleanm
            break
            ;;
        setup)
            setupm
            break
            ;;
        *)
            helpm
            break
            ;;
    esac
done
unset key
